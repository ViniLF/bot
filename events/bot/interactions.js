const { InteractionType } = require("discord.js");
const interactionRouter = require("../../middleware/interactionRouter");

module.exports = {
    name: "interactionCreate",
    run: async(interaction, client) => {
        // Log b√°sico para debug
        console.log(`üîÑ Intera√ß√£o recebida: ${interaction.type} | ${interaction.customId || interaction.commandName || 'N/A'} | ${interaction.user.username}`);

        try {
            // Verificar se a intera√ß√£o ainda √© v√°lida
            if (!interaction.guild) {
                console.log('‚ö†Ô∏è Intera√ß√£o recebida fora de um servidor, ignorando...');
                return;
            }

            // Handler para Slash Commands
            if (interaction.type === InteractionType.ApplicationCommand) {
                await handleSlashCommand(interaction, client);
                return;
            }
            
            // Handler para outros tipos de intera√ß√£o (bot√µes, modals, selects, etc.)
            if (interaction.isButton() || interaction.isStringSelectMenu() || 
                interaction.isChannelSelectMenu() || interaction.isRoleSelectMenu() || 
                interaction.isModalSubmit()) {
                
                // Usar o router para determinar qual handler usar
                const wasHandled = await interactionRouter.routeInteraction(interaction, client);
                
                if (!wasHandled) {
                    console.log(`‚ö†Ô∏è Nenhum handler encontrado para: ${interaction.customId}`);
                    
                    // S√≥ responder se ainda n√£o foi respondido
                    if (!interaction.replied && !interaction.deferred) {
                        await interaction.reply({
                            content: "‚ùå Funcionalidade n√£o encontrada ou temporariamente indispon√≠vel.",
                            ephemeral: true
                        });
                    }
                }
                return;
            }

            // Tipos de intera√ß√£o n√£o tratados
            console.log(`‚ùì Tipo de intera√ß√£o n√£o suportado: ${interaction.type}`);

        } catch (error) {
            console.error(`üö´ Erro no handler principal de intera√ß√£o:`, error);
            
            // Tentar responder apenas se for um erro cr√≠tico e a intera√ß√£o ainda n√£o foi respondida
            if (!interaction.replied && !interaction.deferred) {
                try {
                    // Verificar se a intera√ß√£o ainda √© v√°lida (n√£o expirou)
                    const now = Date.now();
                    const interactionTime = interaction.createdTimestamp;
                    const timeElapsed = now - interactionTime;
                    
                    // Discord interactions expiram em 3 segundos
                    if (timeElapsed < 2800) { // 2.8 segundos para seguran√ßa
                        await interaction.reply({
                            content: "‚ùå Ocorreu um erro interno. Tente novamente em alguns segundos.",
                            ephemeral: true
                        });
                    } else {
                        console.log('‚è∞ Intera√ß√£o expirou, n√£o √© poss√≠vel responder');
                    }
                } catch (replyError) {
                    console.error('Erro ao responder com mensagem de erro:', replyError.message);
                }
            }
        }
    }
};

async function handleSlashCommand(interaction, client) {
    const cmd = client.slashCommands.get(interaction.commandName);
    
    if (!cmd) {
        console.log(`‚ö†Ô∏è Comando n√£o encontrado: ${interaction.commandName}`);
        
        if (!interaction.replied && !interaction.deferred) {
            await interaction.reply({
                content: "‚ùå Comando n√£o encontrado.",
                ephemeral: true
            });
        }
        return;
    }

    // Verificar se j√° foi respondido (double-check de seguran√ßa)
    if (interaction.replied || interaction.deferred) {
        console.log(`‚ö†Ô∏è Comando ${interaction.commandName} j√° foi processado`);
        return;
    }

    // Adicionar propriedade member se n√£o existir
    if (!interaction.member && interaction.guild) {
        interaction.member = interaction.guild.members.cache.get(interaction.user.id);
    }

    // Log do comando executado
    console.log(`üìù Executando comando: ${interaction.commandName} | Usu√°rio: ${interaction.user.username} | Servidor: ${interaction.guild.name}`);

    try {
        // Executar o comando
        await cmd.run(client, interaction);
        
        console.log(`‚úÖ Comando ${interaction.commandName} executado com sucesso`);
        
    } catch (commandError) {
        console.error(`üö´ Erro ao executar comando ${interaction.commandName}:`, commandError);
        
        // Tentar responder com erro apenas se ainda n√£o foi respondido
        if (!interaction.replied && !interaction.deferred) {
            try {
                await interaction.reply({
                    content: `‚ùå Erro ao executar o comando **${interaction.commandName}**. Tente novamente.`,
                    ephemeral: true
                });
            } catch (replyError) {
                console.error('Erro ao responder com erro do comando:', replyError.message);
            }
        } else {
            // Se j√° foi respondido, tentar fazer followUp
            try {
                await interaction.followUp({
                    content: `‚ùå Ocorreu um erro durante a execu√ß√£o do comando.`,
                    ephemeral: true
                });
            } catch (followUpError) {
                console.error('Erro ao fazer followUp:', followUpError.message);
            }
        }
    }
}